@page "/interval/new/{JobId}"

@if (Loading)
{
    <Loader></Loader>
} else if (AddMethod)
{
    <BlazorApp.Pages.Payment.AddPaymentMethod ResetAction="async () => { AddMethod = false; await Session.RefreshPaymentMethods(); await InvokeAsync(StateHasChanged); }"></BlazorApp.Pages.Payment.AddPaymentMethod>
}
else
{
    <h3>Interval Payment</h3>
    <div class="white-bg" style="max-width: 450px;">
        <form @onsubmit="Submit">
            <div class="form-group">
                <label for="Amount">Amount per interval</label>
                <div class="d-flex">
                    <input required name="Amount" @bind="Amount" class="form-control" placeholder="Amount per interval" type="number" />
                    <select class="form-control ml-2" style="max-width: 120px;" @bind="Currency">
                        @foreach (var i in Enum.GetValues(typeof(Currency)))
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="Days">Interval (in days)</label>
                <input required name="Days" class="form-control" placeholder="Interval (in days)" @bind="Days" />
            </div>
            <div class="form-group">
                <label for="Title">Order title</label>
                <input required name="Title" class="form-control" placeholder="Order title" @bind="Title" />
            </div>
            <hr/>
            <div class="container-fluid">
                @foreach (var pm in Session.UserPaymentMethods)
                {@if (pm.Type == MethodType.CreditCard || pm.Type == MethodType.SepaDirect)
    {
                        <div @onclick="() => SelectedMethod = pm">
                            <BlazorApp.Pages.Payment.PaymentMethod Method="pm" Selected="SelectedMethod.Id == pm.Id" />
                        </div>
    }
    else continue;
                }
                <button class="btn btn-info" @onclick="() => AddMethod = true">Add payment method</button>
            </div>
            <hr />
            <div class="container-fluid">
                <label for="paynow">Start paying now? (@(FeesCtl.WalletRechargeFee(Amount, Currency)[1] + " " + Currency.GetName()) per payment) </label>
                <input type="checkbox" name="paynow" placeholder="Pay the amount now ?" @bind="PayNow"/>
            </div>
            <hr />
            <button class="btn btn-success" type="submit">Create reccuring payment</button>
</form>
    </div>
}

@code {

    Currency Currency = Currency.EUR;
    decimal Amount = 100;
    short Days = 7;
    string Title = string.Empty;
    bool PayNow = true;
    bool AddMethod = false;
    UserPaymentMethod SelectedMethod = new UserPaymentMethod();

    async Task Submit()
    {
        Loading = true;
        await InvokeAsync(StateHasChanged);

        var resp = await Ez.GetHttpPostResponse("interval/start", new Dictionary<string, string>
        {
            {"amount", Amount.ToString() },
            {"currency", Currency.GetName() },
            {"jobId", JobId },
            {"instant", PayNow.ToString() },
            {"interval", TimeSpan.FromDays(Days).ToString() },
            {"methodId", SelectedMethod.Id },
            {"title", Title }
        });

        if (resp.IsSuccessStatusCode)
        {
            NavMan.NavigateTo($"/interval/view/{await resp.Content.ReadAsStringAsync()}");
        }
        else ToastService.ShowToast(await resp.Content.ReadAsStringAsync(), ToastLevel.Error);

        Loading = false;
    }

    bool Loading = true;
    protected override async Task OnInitializedAsync()
    {
        var cnt = 0;
        while (!Session.GotInfo)
        {
            await Task.Delay(1000);
            if (cnt > 6)
            {
                NavMan.NavigateTo("/login");
                return;
            }

            cnt++;
        }
        await Session.RefreshPaymentMethods();
        var resp1 = await Ez.GetHttpPostResponse("job/mine", new Dictionary<string, string>
    {
            {"id", JobId }
        });
        if (resp1.IsSuccessStatusCode)
            Job = (await resp1.Content.ReadAsStringAsync()).FromJson<Job>();
        Loading = false;
        await base.OnInitializedAsync();
    }

    public Job Job { get; set; }

    [Parameter] public string JobId { get; set; }
}
