@page "/payout/{WalletId}"

@if (Loading)
{
    <Loader />
}
else
{

    <h1 class="top-header">Payout</h1>
    <div class="card-wrapper payout-screen">
        <div class="card">
            <div class="card-body">
                <p>Total funds:</p>
                <h4> @Wallet.AvailableFunds @Wallet.Currency</h4>
                <hr />
                <p>How much to payout?</p>
                <input type="number" @bind="PayoutAmount" min="15"  />
                <br />
                <div class="btn-group mt-3">
                    <button class="btn btn-success" @onclick="DoPayout">
                        Payout
                    </button>
                    @if (Valid)
                    {
                        <a href="https://dashboard.stripe.com/" target="_blank" class="btn btn-info">Go to Stripe Dashboard</a>
                    }
                    else
                    {
                        <button class="btn btn-info" @onclick="EditProfile">Set up profile</button>
                    }
                    <button class="btn btn-danger" @onclick="@(()=>NavMan.NavigateTo($"/wallets"))">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string WalletId { get; set; }

    bool Loading = true;
    decimal PayoutAmount = 0;
    decimal MinAmount = 15;

    UserWallet Wallet = new UserWallet();

    async Task GetLoginLink()
    {
        using var resp = await Ez.GetHttpPostResponse("payouts/myloginlink");
        if (resp.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("open", await resp.Content.ReadAsStringAsync(), "_blank");
        }
    }

    async Task DoPayout()
    {
        Loading = true;
        await InvokeAsync(StateHasChanged);

        if (PayoutAmount < MinAmount)
        {
            ToastService.ShowToast($"Minimum payout is of {MinAmount} {Wallet.Currency}", ToastLevel.Warning);
            Loading = false;
            return;
        }

        if (PayoutAmount > Wallet.AvailableFunds)
        {
            ToastService.ShowToast("Not enough funds", ToastLevel.Error);
            Loading = false;
            return;
        }
        using var resp = await Ez.GetHttpPostResponse("payouts/transfer", new Dictionary<string, string>
    {
            {"walletId", Wallet.Id },
            {"amount", PayoutAmount.ToString() }
        });
        if (resp.IsSuccessStatusCode)
        {
            ToastService.ShowToast($"Payout of {PayoutAmount} {Wallet.Currency} has been initiated", ToastLevel.Success);
            NavMan.NavigateTo("/wallets");
        }
        else
        {
            ToastService.ShowToast(await resp.Content.ReadAsStringAsync(), ToastLevel.Error);
        }

        Loading = false;
        await InvokeAsync(StateHasChanged);

    }

    async Task EditProfile()
    {
        using var resp = await Ez.GetHttpPostResponse("payouts/getlink", new Dictionary<string, string>
            {
                    {"edit", true.ToString() }
                });
        if (resp.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("open", await resp.Content.ReadAsStringAsync(), "_blank");
        }
    }

    bool Valid = true;

    protected override async Task OnInitializedAsync()
    {
        var cnt = 0;
        while (!Session.GotInfo)
        {
            await Task.Delay(1000);
            cnt++;
        }


        using var wlt = await Ez.GetHttpPostResponse("wallet/get", new Dictionary<string, string> { { "id", WalletId } });
        var profiledone = await Ez.GetHttpPostResponse("payouts/accountstatus");

        Wallet = (await wlt.Content.ReadAsStringAsync()).FromJson<UserWallet>();
        PayoutAmount = Wallet.AvailableFunds;

        MinAmount = FeesCtl.GetConvertedRate(15, Wallet.Currency);
        if (profiledone.IsSuccessStatusCode)
        {
            var obj = JObject.Parse(await profiledone.Content.ReadAsStringAsync());
            if (!obj.Value<bool>("exists"))
            {
                profiledone = await Ez.GetHttpPostResponse("payouts/newprofile");
                if (!profiledone.IsSuccessStatusCode)
                {
                    ToastService.ShowToast("Profile creation failed, try to reload the page", ToastLevel.Error);
                    return;
                }
                profiledone = await Ez.GetHttpPostResponse("payouts/getlink");
                if (profiledone.IsSuccessStatusCode)
                {
                    await JsRuntime.InvokeVoidAsync("open", await profiledone.Content.ReadAsStringAsync(), "_blank");
                }
            }
            else if (!obj.Value<bool>("valid"))
            {
                profiledone = await Ez.GetHttpPostResponse("payouts/getlink");
                if (profiledone.IsSuccessStatusCode)
                {
                    await JsRuntime.InvokeVoidAsync("open", await profiledone.Content.ReadAsStringAsync(), "_blank");
                }
                Valid = false;
            }
        }

        profiledone.Dispose();

        Loading = false;
        await base.OnInitializedAsync();
    }
}
