@using SharedLib.Models;
@page "/looking-for-jobs/edit/{JobId}"

@if (IsLoading)
{
    <Loader />
}
else if (NotFound)
{
    <NotFound />
}
else
{
    <h1 class="top-header">Edit job search</h1>
    <div class="form-wrapper white-bg">
        <form @onsubmit="Submit">
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" class="form-control" id="title" @bind="Post.Title" placeholder="Enter job title">
            </div>
            <div class="form-group">
                <label for="dsc">Description</label>
                <textarea class="form-control" id="dsc" placeholder="Enter job description" @bind="Post.Description" rows="3"></textarea>
            </div>
            <div class="form-group">
                <label for="salary">Experience</label>
                <div class="container-fluid" name="salary">
                    <ul>
                        @foreach (var i in Post.Experience)
                        {
                            <li>@i.Item1: @i.Item2 years <a style="color:red;" @onclick="()=>Post.Experience.Remove(i)">X</a></li>
                        }
                    </ul>
                    <div class="container-fluid form-group">
                        <input class="form-control" type="text" placeholder="Experience title" @bind="NewExp.Item1" />
                        <input class="form-control" type="number" placeholder="Years of experience" @bind="NewExp.Item2" />
                        <button type="button" class="btn btn-info btn-block" 
                                @onclick="() => {Post.Experience.Add(NewExp); NewExp = (string.Empty, 0); }">Add Experience</button>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="currency">Currency</label>
                <select required class="form-control" @bind="Post.Currency">
                    @foreach (var cur in Enum.GetValues(typeof(Currency)))
                    {
                        <option value="@cur">@cur</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="tags">Tags</label>
                <hr />
                <div>
                    @foreach (var tag in Post.Tags)
                    {
                        <span class="tag" @onclick="() => Post.Tags.Remove(tag)">@tag</span>
                    }
                </div>
                <hr />
                <input type="text" class="form-control" id="tags" placeholder="Enter tags"
                       @bind-value="newTag"
                       @bind-value:event="oninput"
                       @onkeyup="GetTags">
                <hr />
                <div>
                    @foreach (var tag in ProposedTags)
                    {
                        if (Post.Tags.Contains(tag.TagName)) continue;
                        <span class="tag" @onclick="() => Post.Tags.Add(tag.TagName)">@tag.TagName - <b>@tag.UseCount</b></span>
                    }
                </div>
            </div>
            <div class="form-group">
                <label for="category">Categories</label>
                <select class="form-control" id="category" @onclick="() => Post.Categories.Add(cat)" @bind="cat">
                    @foreach (var cat in Enum.GetValues(typeof(JobCategory)))
                    {
                        <option value="@cat">@cat</option>
                    }
                </select>
                <hr />
                <div class="container-fluid">
                    @foreach (var cat in Post.Categories)
                    {
                        <label>@cat.GetName() <a style="color: red;" @onclick="() => Post.Categories.Remove(cat)">X</a></label>
                    }
                </div>
                <hr />
                @*<button @onclick="()=>Post.Categories.Add(cat)" class="btn btn-info">Add</button>*@
            </div>
            <button type="submit" class="btn btn-info" disabled="@Submitting">Edit Post</button>
        </form>
    </div>
}

    @code {
        bool IsLoading = true;
        bool NotFound = false;
        (string, short) NewExp = (string.Empty, 0);

        JobCategory cat = JobCategory.Software;
        public SharedLib.Models.JobSearchPost Post = null;

        int currentReqs = 0;
        async Task GetTags()
        {
            try
            {
                if (newTag.Last() is ' ' || newTag.Trim().Last() is ',')
                {
                    newTag = new string(newTag.Trim(','));
                    Post.Tags.Add(newTag.Trim());
                    newTag = string.Empty;
                }
            }
            catch { }

            if (currentReqs > 1) return;
            while (currentReqs > 0)
                await Task.Delay(1000);

            System.Threading.Interlocked.Increment(ref currentReqs);

            using var resp = await Ez.GetHttpPostResponse($"tags/get/{newTag}");
            if (resp.IsSuccessStatusCode)
                ProposedTags = (await resp.Content.ReadAsStringAsync()).FromJson<List<DbTag>>();

            System.Threading.Interlocked.Decrement(ref currentReqs);
        }

        string newTag = string.Empty;
        List<DbTag> ProposedTags = new List<DbTag>();

        bool Submitting = false;

        [Parameter]
        public string JobId { get; set; } = string.Empty;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                using var resp = await Ez.GetHttpPostResponse("post/getsearch", new Dictionary<string, string>
                {
                    {"id", JobId}
                }, false);

                if (resp.IsSuccessStatusCode)
                {
                    if (resp.IsSuccessStatusCode)
                        Post = (await resp.Content.ReadAsStringAsync()).FromJson<SharedLib.Models.JobSearchPost>();
                    else NavMan.NavigateTo("/notfound");

                    IsLoading = false;
                }
                else
                {
                    ToastService.ShowToast("Job was not found", ToastLevel.Info);
                    IsLoading = false;
                    NotFound = true;
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e);
            }

            await base.OnInitializedAsync();
        }


        async Task Submit()
        {
            Submitting = true;
            await InvokeAsync(StateHasChanged);
            Post.UserId = Session.User.Id;
            Post.Id = JobId;

            using var resp = await Ez.GetHttpPostResponse($"post/editsearch", new Dictionary<string, string>
    {
            {"jpost", Post.ToJson() },
        });
            if (resp.IsSuccessStatusCode)
            {


                NavMan.NavigateTo($"/looking-for-jobs/details/{Post.Id}");
            }

            Submitting = false;
            await InvokeAsync(StateHasChanged);
        }
    }
