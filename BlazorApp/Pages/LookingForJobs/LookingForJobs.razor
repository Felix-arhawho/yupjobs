@using SharedLib.Models
@page "/looking-for-jobs" 

<h1 class="top-header">People looking for jobs</h1>
<div class="search_filter">
    <form @onsubmit="Search">
        <div id="custom-search-input">
            <div class="input-group col-md-12">
                <input type="text" class="form-control input-lg" placeholder="Search..." @bind="SearchText" />
                <button class="btn btn-info btn-lg" type="submit">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
    </form>
    <button class="mt-1 btn btn-info d-inline-block d-md-none" @onclick="ToggleFilterMenu">Filters</button>
</div>
<div class="d-flex job-listing-flex">
    <div class="left @FilterMenuCssClass">
        <div class="filters white-bg">
            <div class="filter_list d-flex">
                <div class="filter checkbox-filter">
                    <div class="filter_name">Categories:</div>
                    @foreach (var i in SearchCategories)
                    {
                        //if (i is JobCategory.Any) continue;
                        <div class="form-check">
                            @*<input class="form-check-input" value="cat1" type="checkbox" id="cat1">*@
                            <label class="form-check-label" for="cat1">@i <a @onclick="@(()=> SearchCategories.Remove(i))" style="color:red;">X</a></label>
                        </div>
                    }
                    <hr />
                    <div class="filter_name">Categories:</div>
                    <select @bind="TempCat">
                        @foreach (var i in Enum.GetNames(typeof(JobCategory)))
                        {
                            <option>@i</option>
                        }
                    </select>
                </div>
                <div class="filter select-filter">
                    <div class="filter_name">Skills:</div>
                    <div class="form-group">
                        <label>Selected tags:</label>
                        <div class="selected-tags">
                            @foreach (var i in SearchTags)
                            {
                                <div class="tag-pill">
                                    @i
                                    <span @onclick="() => SearchTags.Remove(i)" class="remove">✕</span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="Tags">Tags</label>
                        <input type="text"
                               @bind-value:event="oninput"
                               @bind-value="filterTag"
                               class="form-control" id="tags" name="tags" />
                    </div>
                    <div class="form-group">
                        <label>Recommended tags:</label>
                        <div class="recommended-tags">
                            @foreach (var i in RecommendedTags)
                            {
                                if (SearchTags.Contains(i.TagName)) continue;
                                <div @onclick="()=> SearchTags.Add(i.TagName)" class="tag-pill">
                                    @i.TagName <b>@i.UseCount</b>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                @*<div class="filter from-to-filter">
                    <div class="filter_name">Work duration:</div>
                    <div class="form-group">
                        <label for="from">Max work duration</label>
                        <input type="number" class="form-control" id="to" name="to" @bind="" />
                    </div>
                </div>*@
                <div class="filter">
                    <div class="filter_name">Max date:</div>
                    <div class="form-group">
                        <label for="from">Max date posted</label>
                        @{
                            var dt = DateTime.Today-TimeSpan.FromDays(90);
                        }
                        <input type="date" min="@dt.Day-@dt.Month-@dt.Year" class="form-control" @bind="MaxDate" id="date" name="date" />
                    </div>
                </div>
                <div class="filter">
                    <div class="filter_name">How many results:</div>
                    <div class="form-group">
                        <label for="max">Results</label>
                        <input type="number" class="form-control" id="max" name="max" @bind="MaxCount" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="right">
        @if (Loading)
        {
            <Loader/>
        }
        else
        {
            foreach (var post in Session.CurrentJobSearchPosts)
            {
                <div class="job-listing white-bg @post.Active" @onclick="@(()=>NavMan.NavigateTo($"/looking-for-jobs/details/{post.Id}"))">
                    <div class="top">
                        <span class="date">Added: @post.PostDate</span>
                        <h3>@post.Title</h3>
                        <div class="categories">
                            @foreach (var cat in post.Categories)
                            {
                                <span>@cat</span>
                            }
                        </div>
                        <p>@post.Description</p>
                    </div>
                    <div class="bottom">
                        @*<div class="salary">
                            @post.RequestedSalary[0] @post.Currency
                        </div>*@
                        <div class="tags">
                            @foreach (var tag in post.Tags)
                            {
                                <span class="tag">@tag</span>
                            }
                        </div>
                    </div>
                </div>
            }
        }

    </div>
</div>


        @code {

            public JobCategory TempCat { get=>SearchCategories.FirstOrDefault(); set {
                    if (SearchCategories.Contains(value)) return;
                    SearchCategories.Add(value);
                } }

            List<string> SearchTags = new List<string>();
            string SearchText = string.Empty;
            List<JobCategory> SearchCategories { get => Cats; set { Cats = value; Search(); } }

            List<JobCategory> Cats = new List<JobCategory>() { JobCategory.Any};

            DateTime MaxDate = DateTime.UtcNow - TimeSpan.FromDays(30);
            short MaxCount = 40;

            bool Loading = false;

            List<DbTag> RecommendedTags = new List<DbTag>();

            string filterTag
            {
                get => TagVal; set
                {
                    TagVal = value;
                    _ = TagSearch();
                }
            }
            string TagVal = string.Empty;

            async Task TagSearch()
            {
                if (string.IsNullOrEmpty(TagVal)) return;

                using var resp = await Ez.GetHttpPostResponse($"tags/get/{TagVal}");
                Debug.WriteLine(await resp.Content.ReadAsStringAsync());
                if (resp.IsSuccessStatusCode)
                    RecommendedTags = (await resp.Content.ReadAsStringAsync()).FromJson<List<DbTag>>();
                RecommendedTags.Add(new DbTag()
                {
                    TagName = TagVal,
                    UseCount = 0,
                });
                await InvokeAsync(StateHasChanged);
            }


            protected override async Task OnInitializedAsync()
            {
                Loading = Session.CurrentJobSearchPosts.Count is 0;
                await InvokeAsync(StateHasChanged);

                if (Loading)
                {
                    using var tres = await Ez.GetHttpPostResponse("tags/top/" + 6, null, false);
                    if (tres.IsSuccessStatusCode)
                    {
                        RecommendedTags = (await tres.Content.ReadAsStringAsync()).FromJson<List<DbTag>>();
                        SearchTags = RecommendedTags.Select(x => x.TagName).ToList();
                    }

                    using var resp = await Ez.GetHttpPostResponse("post/getsearch", null, false);
                    if (resp.IsSuccessStatusCode)
                        Session.CurrentJobSearchPosts = (await resp.Content.ReadAsStringAsync()).FromJson<List<SharedLib.Models.JobSearchPost>>();

                }

                Loading = false;
                await InvokeAsync(StateHasChanged);
                await base.OnInitializedAsync();
            }

            //public static JobPostFilter SearchFilter = new JobPostFilter();

            async Task Search()
            {
                Loading = true;
                await InvokeAsync(StateHasChanged);

                using var resp = await Ez.GetHttpPostResponse("post/getsearch", new Dictionary<string, string>()
                {
                    {"categories", SearchCategories.ToJson() },
                    {"search", SearchText },
                    {"tags", SearchTags.ToJson() },
                    {"maxCount", MaxCount.ToString() },
                    //{"maxDate", MaxDate.ToString() }
                }, false);

                if (resp.IsSuccessStatusCode)
                    Session.CurrentJobSearchPosts = (await resp.Content.ReadAsStringAsync()).FromJson<List<SharedLib.Models.JobSearchPost>>();
                else ToastService.ShowToast("There was an error while getting the posts", ToastLevel.Warning);

                Loading = false;
                await InvokeAsync(StateHasChanged);
            }

            public static bool filterMenu = false;

            private string FilterMenuCssClass => filterMenu ? "active" : null;

            public static void ToggleFilterMenu()
            {
                filterMenu = !filterMenu;
            }
        }
